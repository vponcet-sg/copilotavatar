
name: Build and deploy Node.js app to Azure Web App - GYDJv2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'  # Match your local development version
          cache: 'npm'

      - name: npm install, build, and test
        run: |
          # Ensure package-lock.json is in sync
          npm ci || (echo "Lock file out of sync, regenerating..." && rm package-lock.json && npm install)
          npm run build --if-present
          npm run test --if-present || true

      - name: Prepare deployment package
        run: |
          # Create deployment package with all necessary files
          mkdir deploy-package
          
          # Copy built assets (already compiled)
          cp -r dist deploy-package/
          
          # Copy server and config files
          cp server.js deploy-package/
          cp web.config deploy-package/
          cp .deployment deploy-package/
          
          # Create a production-only package.json (without build scripts)
          cat > deploy-package/package.json << 'EOF'
          {
            "name": "copilot-studio-speech-avatar",
            "private": true,
            "version": "0.0.0",
            "type": "module",
            "scripts": {
              "start": "node server.js",
              "start:prod": "NODE_ENV=production node server.js"
            },
            "engines": {
              "node": ">=18.0.0"
            },
            "dependencies": {
              "@azure/identity": "^4.10.1",
              "axios": "^1.10.0",
              "botframework-directlinejs": "^0.15.6",
              "express": "^4.18.2",
              "microsoft-cognitiveservices-speech-sdk": "^1.44.1",
              "react": "^19.1.0",
              "react-dom": "^19.1.0",
              "uuid": "^11.1.0"
            }
          }
          EOF
          
          # Copy public folder if it exists
          if [ -d "public" ]; then
            cp -r public deploy-package/
          fi
          
          # Copy environment files if they exist
          cp .env deploy-package/ 2>/dev/null || true
          
          # Install production dependencies only
          cd deploy-package
          npm install --only=production --omit=dev
          cd ..
          
          # Verify deployment package structure
          echo "üì¶ Deployment package contents:"
          ls -la deploy-package/
          echo "üìÅ Checking dist directory:"
          ls -la deploy-package/dist/ 2>/dev/null || echo "‚ùå dist directory not found"
          echo "üìÑ Checking package.json:"
          cat deploy-package/package.json
          echo "üîß Checking .deployment file:"
          cat deploy-package/.deployment 2>/dev/null || echo "‚ùå .deployment file not found"

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: deploy-package

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app
          path: deploy-package
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_ACD1C4D0F26548A3A6F492D08835C484 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_D110D59C5BA047DA82254FF4B8A570CE }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_1698A8A41FF842D39CFB2C55BAE07A4D }}

      - name: 'Configure Azure Web App Settings Before Deployment'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Configure app settings BEFORE deployment to prevent Oryx build
            az webapp config appsettings set \
              --resource-group appsvc_linux_eastasia \
              --name GYDJv2 \
              --settings \
                SCM_DO_BUILD_DURING_DEPLOYMENT=false \
                ENABLE_ORYX_BUILD=false \
                WEBSITE_NODE_DEFAULT_VERSION=~22 \
                NODE_ENV=production \
                WEBSITES_ENABLE_APP_SERVICE_STORAGE=false \
                WEBSITES_PORT=8080 \
                WEBSITE_RUN_FROM_PACKAGE=1 \
                WEBSITE_DISABLE_SCM_SEPARATION=true
            
            # Set startup command
            az webapp config set \
              --resource-group appsvc_linux_eastasia \
              --name GYDJv2 \
              --startup-file "npm start"

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        run: |
          # Deploy using Azure CLI with ZIP deployment
          cd deploy-package
          zip -r ../app.zip .
          cd ..
          
          # Deploy the ZIP file directly without Oryx build
          az webapp deploy \
            --resource-group appsvc_linux_eastasia \
            --name GYDJv2 \
            --src-path app.zip \
            --type zip \
            --async false
          
      - name: 'Enable Application Logging'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Enable logging for debugging
            az webapp log config \
              --resource-group appsvc_linux_eastasia \
              --name GYDJv2 \
              --application-logging filesystem \
              --level information
